#!/usr/bin/env node
/*eslint no-process-exit: 0*/
const path = require("path");
const program = require('commander');
const commands = require('./commandsv2');
const co = require("co");
const help = process.argv.slice(2)[0];

require('colors');

if (!help || help === "-h" || help === "--help") {
	const h = require("./commandsv2/help").many;
	console.log(h(commands));
	process.exit(0);
}
commands.forEach(function (definition) {
	try {

		var args = definition.args.length > 0 ? `[${definition.args.join("] [")}]` : "";
		var command = program.command(`${definition.cmd} ${args}`)
			.description(definition.description)
			.action(co.wrap(function* (){

				try{
					if(definition.cmd !== "new"){
						const localversion = require(path.join(process.cwd(),"package.json")).dependencies.koaton;
					}
				}catch(e){
					console.log();
					console.log("You must be inside a koaton proyect to run this command.")
					console.log();
					process.exit(1);
				}

				var exitCode = 1;
				try{
					exitCode = yield definition.action.apply(command,arguments);
				}catch(err){
					console.log(err.stack);
				}
				process.exit( exitCode === 0 ? 0:1 );
			}));
		if (definition.alias) {
			command.alias(definition.alias);
		}
		definition.options.forEach(function (option) {
			command.option(`${option[0]}, ${option[1]}`, option[2]);
		});
	} catch (e) {
		console.log(e.stack);
	}
});
program.parse(process.argv);
process.on("beforeExit",(code)=>{
	console.log();
	console.log("That command does not exists.".cyan);
	console.log();
	process.exit(1);
});
