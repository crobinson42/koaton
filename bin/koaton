#!/usr/bin/env node

/*eslint no-process-exit: 0*/
"use strict";
const utils = require('./utils');
process.env.isproyect = utils.canAccess('public') &&
	utils.canAccess('app.js') &&
	utils.canAccess('bower.json') &&
	utils.canAccess('package.json') &&
	utils.canAccess('routes') &&
	utils.canAccess('config');
process.env.NODE_ENV = process.argv.indexOf("-p") > -1 || process.argv.indexOf("--production") > -1 ? "production" : "development";
var port = process.argv.indexOf("--port");
port = parseInt(process.argv[port + 1] || 62626, 10);
process.env.port = port;

require('../lib/scfg');
const path = require("upath");
const program = require('commander');
const commands = require('./commands');
const pcmds = require("./commands/help").include();
const co = require("co");
const help = process.argv.slice(2)[0];
const version = require(BinPath("..", "package.json")).version;
require('colors');
if (!help || help === "-h" || help === "--help") {
	let help = "";
	help += `  version: ${version}\n`;
	help += "  Command list:\n";
	console.log(help);
	const h = require("./commands/help").many;
	console.log(h(commands));
	if (pcmds.length > 0) {
		console.log("Project commands:\n");
		console.log(h(pcmds));
	}
	process.exit(0);
}

commands.concat(pcmds).forEach(function(definition) {
	try {
		var args = definition.args.length > 0 ? `[${definition.args.join("] [")}]` : "";
		var command = program.command(`${definition.cmd} ${args}`)
			.description(definition.description)
			.action(co.wrap(function*() {
				try {
					if (!(definition.cmd === "new" || definition.cmd === "semver") && process.env.isproyect==='false') {
						throw definition.cmd;
					}
					if (definition.cmd !== "new" && definition.cmd !== "barebone") {
						const localversion = require(path.join(process.cwd(), "package.json")).dependencies.koaton;
						console.log(`koaton ${require('../package.json').version} -> ${localversion}`);
					}
				} catch (e) {
					console.log();
					console.log("You must be inside a koaton proyect to run this command.")
					console.log();
					process.exit(1);
				}

				var exitCode = 1;
				try {
					exitCode = yield definition.action.apply(command, arguments);
				} catch (err) {
					console.log(err.stack);
					process.exit(1);
				}
				process.exit( (exitCode === 0 || exitCode === undefined) ? 0 : 1);
			}));
		if (definition.alias) {
			command.alias(definition.alias);
		}
		definition.options.forEach(function(option) {
			command.option(`${option[0]}, ${option[1]}`, option[2]);
		});
	} catch (e) {
		console.log(e.stack);
	}
});
program.parse(process.argv);
process.on("beforeExit", () => {
	console.log();
	console.log("That command does not exists.".cyan);
	console.log();
	process.exit(1);
});
process.title = "Koaton";
